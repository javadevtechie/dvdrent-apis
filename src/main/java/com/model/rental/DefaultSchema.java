/*
 * This file is generated by jOOQ.
 */
package com.model.rental;


import com.model.rental.tables.Actor;
import com.model.rental.tables.ActorInfo;
import com.model.rental.tables.Address;
import com.model.rental.tables.Category;
import com.model.rental.tables.City;
import com.model.rental.tables.Country;
import com.model.rental.tables.Customer;
import com.model.rental.tables.CustomerList;
import com.model.rental.tables.Film;
import com.model.rental.tables.FilmActor;
import com.model.rental.tables.FilmCategory;
import com.model.rental.tables.FilmInStock;
import com.model.rental.tables.FilmList;
import com.model.rental.tables.FilmNotInStock;
import com.model.rental.tables.Inventory;
import com.model.rental.tables.Language;
import com.model.rental.tables.NicerButSlowerFilmList;
import com.model.rental.tables.Payment;
import com.model.rental.tables.Rental;
import com.model.rental.tables.RewardsReport;
import com.model.rental.tables.SalesByFilmCategory;
import com.model.rental.tables.SalesByStore;
import com.model.rental.tables.Staff;
import com.model.rental.tables.StaffList;
import com.model.rental.tables.Store;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Catalog;
import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Result;
import org.jooq.Sequence;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefaultSchema extends SchemaImpl {

    private static final long serialVersionUID = -1625936688;

    /**
     * The reference instance of <code></code>
     */
    public static final DefaultSchema DEFAULT_SCHEMA = new DefaultSchema();

    /**
     * The table <code>actor</code>.
     */
    public final Actor ACTOR = com.model.rental.tables.Actor.ACTOR;

    /**
     * The table <code>actor_info</code>.
     */
    public final ActorInfo ACTOR_INFO = com.model.rental.tables.ActorInfo.ACTOR_INFO;

    /**
     * The table <code>address</code>.
     */
    public final Address ADDRESS = com.model.rental.tables.Address.ADDRESS;

    /**
     * The table <code>category</code>.
     */
    public final Category CATEGORY = com.model.rental.tables.Category.CATEGORY;

    /**
     * The table <code>city</code>.
     */
    public final City CITY = com.model.rental.tables.City.CITY;

    /**
     * The table <code>country</code>.
     */
    public final Country COUNTRY = com.model.rental.tables.Country.COUNTRY;

    /**
     * The table <code>customer</code>.
     */
    public final Customer CUSTOMER = com.model.rental.tables.Customer.CUSTOMER;

    /**
     * The table <code>customer_list</code>.
     */
    public final CustomerList CUSTOMER_LIST = com.model.rental.tables.CustomerList.CUSTOMER_LIST;

    /**
     * The table <code>film</code>.
     */
    public final Film FILM = com.model.rental.tables.Film.FILM;

    /**
     * The table <code>film_actor</code>.
     */
    public final FilmActor FILM_ACTOR = com.model.rental.tables.FilmActor.FILM_ACTOR;

    /**
     * The table <code>film_category</code>.
     */
    public final FilmCategory FILM_CATEGORY = com.model.rental.tables.FilmCategory.FILM_CATEGORY;

    /**
     * The table <code>film_in_stock</code>.
     */
    public final FilmInStock FILM_IN_STOCK = com.model.rental.tables.FilmInStock.FILM_IN_STOCK;

    /**
     * Call <code>film_in_stock</code>.
     */
    public static Result<Record> FILM_IN_STOCK(Configuration configuration, Integer pFilmId, Integer pStoreId) {
        return configuration.dsl().selectFrom(com.model.rental.tables.FilmInStock.FILM_IN_STOCK.call(pFilmId, pStoreId)).fetch();
    }

    /**
     * Get <code>film_in_stock</code> as a table.
     */
    public static FilmInStock FILM_IN_STOCK(Integer pFilmId, Integer pStoreId) {
        return com.model.rental.tables.FilmInStock.FILM_IN_STOCK.call(pFilmId, pStoreId);
    }

    /**
     * Get <code>film_in_stock</code> as a table.
     */
    public static FilmInStock FILM_IN_STOCK(Field<Integer> pFilmId, Field<Integer> pStoreId) {
        return com.model.rental.tables.FilmInStock.FILM_IN_STOCK.call(pFilmId, pStoreId);
    }

    /**
     * The table <code>film_list</code>.
     */
    public final FilmList FILM_LIST = com.model.rental.tables.FilmList.FILM_LIST;

    /**
     * The table <code>film_not_in_stock</code>.
     */
    public final FilmNotInStock FILM_NOT_IN_STOCK = com.model.rental.tables.FilmNotInStock.FILM_NOT_IN_STOCK;

    /**
     * Call <code>film_not_in_stock</code>.
     */
    public static Result<Record> FILM_NOT_IN_STOCK(Configuration configuration, Integer pFilmId, Integer pStoreId) {
        return configuration.dsl().selectFrom(com.model.rental.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(pFilmId, pStoreId)).fetch();
    }

    /**
     * Get <code>film_not_in_stock</code> as a table.
     */
    public static FilmNotInStock FILM_NOT_IN_STOCK(Integer pFilmId, Integer pStoreId) {
        return com.model.rental.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(pFilmId, pStoreId);
    }

    /**
     * Get <code>film_not_in_stock</code> as a table.
     */
    public static FilmNotInStock FILM_NOT_IN_STOCK(Field<Integer> pFilmId, Field<Integer> pStoreId) {
        return com.model.rental.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(pFilmId, pStoreId);
    }

    /**
     * The table <code>inventory</code>.
     */
    public final Inventory INVENTORY = com.model.rental.tables.Inventory.INVENTORY;

    /**
     * The table <code>language</code>.
     */
    public final Language LANGUAGE = com.model.rental.tables.Language.LANGUAGE;

    /**
     * The table <code>nicer_but_slower_film_list</code>.
     */
    public final NicerButSlowerFilmList NICER_BUT_SLOWER_FILM_LIST = com.model.rental.tables.NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST;

    /**
     * The table <code>payment</code>.
     */
    public final Payment PAYMENT = com.model.rental.tables.Payment.PAYMENT;

    /**
     * The table <code>rental</code>.
     */
    public final Rental RENTAL = com.model.rental.tables.Rental.RENTAL;

    /**
     * The table <code>rewards_report</code>.
     */
    public final RewardsReport REWARDS_REPORT = com.model.rental.tables.RewardsReport.REWARDS_REPORT;

    /**
     * Call <code>rewards_report</code>.
     */
    public static Result<Record> REWARDS_REPORT(Configuration configuration, Integer minMonthlyPurchases, BigDecimal minDollarAmountPurchased) {
        return configuration.dsl().selectFrom(com.model.rental.tables.RewardsReport.REWARDS_REPORT.call(minMonthlyPurchases, minDollarAmountPurchased)).fetch();
    }

    /**
     * Get <code>rewards_report</code> as a table.
     */
    public static RewardsReport REWARDS_REPORT(Integer minMonthlyPurchases, BigDecimal minDollarAmountPurchased) {
        return com.model.rental.tables.RewardsReport.REWARDS_REPORT.call(minMonthlyPurchases, minDollarAmountPurchased);
    }

    /**
     * Get <code>rewards_report</code> as a table.
     */
    public static RewardsReport REWARDS_REPORT(Field<Integer> minMonthlyPurchases, Field<BigDecimal> minDollarAmountPurchased) {
        return com.model.rental.tables.RewardsReport.REWARDS_REPORT.call(minMonthlyPurchases, minDollarAmountPurchased);
    }

    /**
     * The table <code>sales_by_film_category</code>.
     */
    public final SalesByFilmCategory SALES_BY_FILM_CATEGORY = com.model.rental.tables.SalesByFilmCategory.SALES_BY_FILM_CATEGORY;

    /**
     * The table <code>sales_by_store</code>.
     */
    public final SalesByStore SALES_BY_STORE = com.model.rental.tables.SalesByStore.SALES_BY_STORE;

    /**
     * The table <code>staff</code>.
     */
    public final Staff STAFF = com.model.rental.tables.Staff.STAFF;

    /**
     * The table <code>staff_list</code>.
     */
    public final StaffList STAFF_LIST = com.model.rental.tables.StaffList.STAFF_LIST;

    /**
     * The table <code>store</code>.
     */
    public final Store STORE = com.model.rental.tables.Store.STORE;

    /**
     * No further instances allowed
     */
    private DefaultSchema() {
        super("", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Sequence<?>> getSequences() {
        List result = new ArrayList();
        result.addAll(getSequences0());
        return result;
    }

    private final List<Sequence<?>> getSequences0() {
        return Arrays.<Sequence<?>>asList(
            Sequences.ACTOR_ACTOR_ID_SEQ,
            Sequences.ADDRESS_ADDRESS_ID_SEQ,
            Sequences.CATEGORY_CATEGORY_ID_SEQ,
            Sequences.CITY_CITY_ID_SEQ,
            Sequences.COUNTRY_COUNTRY_ID_SEQ,
            Sequences.CUSTOMER_CUSTOMER_ID_SEQ,
            Sequences.FILM_FILM_ID_SEQ,
            Sequences.INVENTORY_INVENTORY_ID_SEQ,
            Sequences.LANGUAGE_LANGUAGE_ID_SEQ,
            Sequences.PAYMENT_PAYMENT_ID_SEQ,
            Sequences.RENTAL_RENTAL_ID_SEQ,
            Sequences.STAFF_STAFF_ID_SEQ,
            Sequences.STORE_STORE_ID_SEQ);
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Actor.ACTOR,
            ActorInfo.ACTOR_INFO,
            Address.ADDRESS,
            Category.CATEGORY,
            City.CITY,
            Country.COUNTRY,
            Customer.CUSTOMER,
            CustomerList.CUSTOMER_LIST,
            Film.FILM,
            FilmActor.FILM_ACTOR,
            FilmCategory.FILM_CATEGORY,
            FilmInStock.FILM_IN_STOCK,
            FilmList.FILM_LIST,
            FilmNotInStock.FILM_NOT_IN_STOCK,
            Inventory.INVENTORY,
            Language.LANGUAGE,
            NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST,
            Payment.PAYMENT,
            Rental.RENTAL,
            RewardsReport.REWARDS_REPORT,
            SalesByFilmCategory.SALES_BY_FILM_CATEGORY,
            SalesByStore.SALES_BY_STORE,
            Staff.STAFF,
            StaffList.STAFF_LIST,
            Store.STORE);
    }
}
