/*
 * This file is generated by jOOQ.
 */
package com.model.rental.tables;


import com.model.rental.DefaultSchema;

import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SalesByStore extends TableImpl<Record> {

    private static final long serialVersionUID = -1450106864;

    /**
     * The reference instance of <code>sales_by_store</code>
     */
    public static final SalesByStore SALES_BY_STORE = new SalesByStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>sales_by_store.store</code>.
     */
    public final TableField<Record, String> STORE = createField(DSL.name("store"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sales_by_store.manager</code>.
     */
    public final TableField<Record, String> MANAGER = createField(DSL.name("manager"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sales_by_store.total_sales</code>.
     */
    public final TableField<Record, BigDecimal> TOTAL_SALES = createField(DSL.name("total_sales"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * Create a <code>sales_by_store</code> table reference
     */
    public SalesByStore() {
        this(DSL.name("sales_by_store"), null);
    }

    /**
     * Create an aliased <code>sales_by_store</code> table reference
     */
    public SalesByStore(String alias) {
        this(DSL.name(alias), SALES_BY_STORE);
    }

    /**
     * Create an aliased <code>sales_by_store</code> table reference
     */
    public SalesByStore(Name alias) {
        this(alias, SALES_BY_STORE);
    }

    private SalesByStore(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private SalesByStore(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SalesByStore(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, SALES_BY_STORE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public SalesByStore as(String alias) {
        return new SalesByStore(DSL.name(alias), this);
    }

    @Override
    public SalesByStore as(Name alias) {
        return new SalesByStore(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SalesByStore rename(String name) {
        return new SalesByStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SalesByStore rename(Name name) {
        return new SalesByStore(name, null);
    }
}
