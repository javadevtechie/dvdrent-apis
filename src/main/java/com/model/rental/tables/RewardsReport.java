/*
 * This file is generated by jOOQ.
 */
package com.model.rental.tables;


import com.model.rental.DefaultSchema;
import com.model.rental.Keys;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RewardsReport extends TableImpl<Record> {

    private static final long serialVersionUID = -1269205740;

    /**
     * The reference instance of <code>rewards_report</code>
     */
    public static final RewardsReport REWARDS_REPORT = new RewardsReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>rewards_report.customer_id</code>.
     */
    public final TableField<Record, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dvdrental.customer_customer_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>rewards_report.store_id</code>.
     */
    public final TableField<Record, Short> STORE_ID = createField(DSL.name("store_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>rewards_report.first_name</code>.
     */
    public final TableField<Record, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>rewards_report.last_name</code>.
     */
    public final TableField<Record, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>rewards_report.email</code>.
     */
    public final TableField<Record, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>rewards_report.address_id</code>.
     */
    public final TableField<Record, Short> ADDRESS_ID = createField(DSL.name("address_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>rewards_report.activebool</code>.
     */
    public final TableField<Record, Boolean> ACTIVEBOOL = createField(DSL.name("activebool"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>rewards_report.create_date</code>.
     */
    public final TableField<Record, LocalDate> CREATE_DATE = createField(DSL.name("create_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false).defaultValue(org.jooq.impl.DSL.field("('now'::text)::date", org.jooq.impl.SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>rewards_report.last_update</code>.
     */
    public final TableField<Record, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>rewards_report.active</code>.
     */
    public final TableField<Record, Integer> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>rewards_report</code> table reference
     */
    public RewardsReport() {
        this(DSL.name("rewards_report"), null);
    }

    /**
     * Create an aliased <code>rewards_report</code> table reference
     */
    public RewardsReport(String alias) {
        this(DSL.name(alias), REWARDS_REPORT);
    }

    /**
     * Create an aliased <code>rewards_report</code> table reference
     */
    public RewardsReport(Name alias) {
        this(alias, REWARDS_REPORT);
    }

    private RewardsReport(Name alias, Table<Record> aliased) {
        this(alias, aliased, new Field[2]);
    }

    private RewardsReport(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RewardsReport(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REWARDS_REPORT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<Record, Integer> getIdentity() {
        return Keys.IDENTITY_REWARDS_REPORT;
    }

    @Override
    public RewardsReport as(String alias) {
        return new RewardsReport(DSL.name(alias), this, parameters);
    }

    @Override
    public RewardsReport as(Name alias) {
        return new RewardsReport(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public RewardsReport rename(String name) {
        return new RewardsReport(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public RewardsReport rename(Name name) {
        return new RewardsReport(name, null, parameters);
    }

    /**
     * Call this table-valued function
     */
    public RewardsReport call(Integer minMonthlyPurchases, BigDecimal minDollarAmountPurchased) {
        return new RewardsReport(DSL.name(getName()), null, new Field[] { 
              DSL.val(minMonthlyPurchases, org.jooq.impl.SQLDataType.INTEGER)
            , DSL.val(minDollarAmountPurchased, org.jooq.impl.SQLDataType.NUMERIC)
        });
    }

    /**
     * Call this table-valued function
     */
    public RewardsReport call(Field<Integer> minMonthlyPurchases, Field<BigDecimal> minDollarAmountPurchased) {
        return new RewardsReport(DSL.name(getName()), null, new Field[] { 
              minMonthlyPurchases
            , minDollarAmountPurchased
        });
    }
}
